// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id          String   @id @default(cuid())
  email       String   @unique
  phone       String?
  password    String
  firstName   String
  lastName    String
  role        String   @default("CUSTOMER") // ADMIN, MANAGER, VENDOR, CUSTOMER, BEAUTICIAN
  status      String   @default("ACTIVE")   // ACTIVE, SUSPENDED, PENDING
  avatar      String?
  fcmToken    String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  vendor      Vendor?
  beautician  Beautician?
  bookings    Booking[]
  reviews     Review[]
  addresses   Address[]
  payments    Payment[]

  @@map("users")
}

model Vendor {
  id              String   @id @default(cuid())
  userId          String   @unique
  shopName        String
  description     String?
  status          String   @default("PENDING") // PENDING, APPROVED, REJECTED, SUSPENDED
  businessLicense String?
  taxId           String?
  
  // Location
  latitude        Float
  longitude       Float
  address         String
  city            String
  state           String
  zipCode         String
  
  // Business Hours
  mondayHours     String?       // JSON: {"open": "09:00", "close": "18:00", "closed": false}
  tuesdayHours    String?
  wednesdayHours  String?
  thursdayHours   String?
  fridayHours     String?
  saturdayHours   String?
  sundayHours     String?
  
  // Settings
  serviceRadius   Int           @default(5) // km
  advanceBooking  Int           @default(7) // days
  cancellation    Int           @default(24) // hours
  
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt

  // Relations
  user            User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  services        Service[]
  addons          Addon[]
  slots           VendorSlot[]
  bookings        Booking[]
  reviews         Review[]
  media           Media[]

  @@map("vendors")
}

model Beautician {
  id              String   @id @default(cuid())
  userId          String   @unique
  skills          String[] // Array of skills
  yearsOfExperience String
  certifications  String[] // Array of certification file paths
  bio             String?
  profilePhoto    String?
  status          String   @default("PENDING_MANAGER_REVIEW") // PENDING_MANAGER_REVIEW, PENDING_ADMIN_REVIEW, APPROVED, REJECTED
  managerApprovedAt DateTime?
  adminApprovedAt DateTime?
  averageRating   Float    @default(0)
  totalServices   Int      @default(0)
  totalEarnings   Float    @default(0)
  
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  // Relations
  user            User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  bookings        Booking[]

  @@map("beauticians")
}

model ServiceCategoryModel {
  id          String   @id @default(cuid())
  name        String   @unique
  description String?
  icon        String?
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  services    ServiceCategoryMap[]

  @@map("service_categories")
}

model Service {
  id          String   @id @default(cuid())
  vendorId    String
  name        String
  description String?
  duration    Int      // minutes
  price       Float
  isActive    Boolean  @default(true)
  image       String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  vendor      Vendor                @relation(fields: [vendorId], references: [id], onDelete: Cascade)
  categories  ServiceCategoryMap[]
  addons      ServiceAddon[]
  bookingItems BookingItem[]

  @@index([vendorId])
  @@map("services")
}

model ServiceCategoryMap {
  id         String   @id @default(cuid())
  serviceId  String
  categoryId String

  // Relations
  service    Service              @relation(fields: [serviceId], references: [id], onDelete: Cascade)
  category   ServiceCategoryModel @relation(fields: [categoryId], references: [id], onDelete: Cascade)

  @@unique([serviceId, categoryId])
  @@map("service_category_map")
}

model Addon {
  id          String   @id @default(cuid())
  vendorId    String
  name        String
  description String?
  price       Float
  duration    Int      @default(0) // additional minutes
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  vendor      Vendor         @relation(fields: [vendorId], references: [id], onDelete: Cascade)
  services    ServiceAddon[]
  bookingItems BookingItemAddon[]

  @@index([vendorId])
  @@map("addons")
}

model ServiceAddon {
  id        String @id @default(cuid())
  serviceId String
  addonId   String

  // Relations
  service   Service @relation(fields: [serviceId], references: [id], onDelete: Cascade)
  addon     Addon   @relation(fields: [addonId], references: [id], onDelete: Cascade)

  @@unique([serviceId, addonId])
  @@map("service_addons")
}

model VendorSlot {
  id        String   @id @default(cuid())
  vendorId  String
  date      DateTime
  startTime String     // HH:MM format
  endTime   String     // HH:MM format
  status    String     @default("AVAILABLE") // AVAILABLE, BOOKED, BLOCKED
  bookingId String?    @unique
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt

  // Relations
  vendor    Vendor   @relation(fields: [vendorId], references: [id], onDelete: Cascade)
  booking   Booking? @relation(fields: [bookingId], references: [id])

  @@unique([vendorId, date, startTime])
  @@index([vendorId, date])
  @@map("vendor_slots")
}

model Booking {
  id              String   @id @default(cuid())
  customerId      String
  vendorId        String
  beauticianId    String?  // Optional for at-home services
  status          String   @default("PENDING") // PENDING, CONFIRMED, IN_PROGRESS, COMPLETED, CANCELLED, REFUNDED
  
  // Scheduling
  scheduledDate   DateTime
  scheduledTime   String        // HH:MM format
  duration        Int           // total minutes
  
  // Pricing
  subtotal        Float
  discount        Float         @default(0)
  tax             Float         @default(0)
  total           Float
  
  // Address
  addressId       String
  
  // Metadata
  notes           String?
  cancellationReason String?
  
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt

  // Relations
  customer        User          @relation(fields: [customerId], references: [id])
  vendor          Vendor        @relation(fields: [vendorId], references: [id])
  beautician      Beautician?   @relation(fields: [beauticianId], references: [id])
  address         Address       @relation(fields: [addressId], references: [id])
  items           BookingItem[]
  payments        Payment[]
  reviews         Review[]
  events          BookingEvent[]
  slot            VendorSlot?

  @@index([customerId])
  @@index([vendorId])
  @@index([scheduledDate])
  @@map("bookings")
}

model BookingItem {
  id        String   @id @default(cuid())
  bookingId String
  serviceId String
  quantity  Int      @default(1)
  price     Float
  createdAt DateTime @default(now())

  // Relations
  booking   Booking            @relation(fields: [bookingId], references: [id], onDelete: Cascade)
  service   Service            @relation(fields: [serviceId], references: [id])
  addons    BookingItemAddon[]

  @@index([bookingId])
  @@map("booking_items")
}

model BookingItemAddon {
  id            String   @id @default(cuid())
  bookingItemId String
  addonId       String
  quantity      Int      @default(1)
  price         Float
  createdAt     DateTime @default(now())

  // Relations
  bookingItem   BookingItem @relation(fields: [bookingItemId], references: [id], onDelete: Cascade)
  addon         Addon       @relation(fields: [addonId], references: [id])

  @@index([bookingItemId])
  @@map("booking_item_addons")
}

model Payment {
  id              String   @id @default(cuid())
  bookingId       String
  userId          String
  amount          Float
  method          String   // CARD, UPI, WALLET
  status          String   @default("PENDING") // PENDING, PROCESSING, COMPLETED, FAILED, REFUNDED
  
  // Payment Gateway
  gatewayId       String?       // Stripe/Razorpay payment ID
  gatewayResponse String?       // JSON string
  
  // Refund
  refundAmount    Float?
  refundReason    String?
  refundedAt      DateTime?
  
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt

  // Relations
  booking         Booking       @relation(fields: [bookingId], references: [id])
  user            User          @relation(fields: [userId], references: [id])

  @@index([bookingId])
  @@index([userId])
  @@map("payments")
}

model Review {
  id        String   @id @default(cuid())
  bookingId String   @unique
  customerId String
  vendorId  String
  rating    Int      // 1-5
  comment   String?
  response  String?  // Vendor response
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  booking   Booking  @relation(fields: [bookingId], references: [id])
  customer  User     @relation(fields: [customerId], references: [id])
  vendor    Vendor   @relation(fields: [vendorId], references: [id])

  @@index([vendorId])
  @@map("reviews")
}

model Address {
  id        String   @id @default(cuid())
  userId    String
  type      String   @default("HOME") // HOME, WORK, OTHER
  name      String?
  street    String
  city      String
  state     String
  zipCode   String
  latitude  Float?
  longitude Float?
  isDefault Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  bookings  Booking[]

  @@index([userId])
  @@map("addresses")
}

model Media {
  id        String   @id @default(cuid())
  vendorId  String?
  type      String   // IMAGE, VIDEO, DOCUMENT
  url       String
  filename  String
  mimeType  String
  size      Int
  createdAt DateTime @default(now())

  // Relations
  vendor    Vendor?  @relation(fields: [vendorId], references: [id], onDelete: Cascade)

  @@index([vendorId])
  @@map("media")
}

model Coupon {
  id          String    @id @default(cuid())
  code        String    @unique
  description String?
  type        String    // PERCENTAGE, FIXED
  value       Float
  minAmount   Float?
  maxDiscount Float?
  usageLimit  Int?
  usageCount  Int       @default(0)
  isActive    Boolean   @default(true)
  validFrom   DateTime
  validUntil  DateTime
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  @@map("coupons")
}

model BookingEvent {
  id        String   @id @default(cuid())
  bookingId String
  type      String   // CREATED, CONFIRMED, CANCELLED, etc.
  data      String?  // JSON string
  createdAt DateTime @default(now())

  // Relations
  booking   Booking  @relation(fields: [bookingId], references: [id], onDelete: Cascade)

  @@index([bookingId])
  @@index([createdAt])
  @@map("booking_events")
}

model AuditLog {
  id        String   @id @default(cuid())
  userId    String?
  action    String
  resource  String
  resourceId String?
  oldData   String?  // JSON string
  newData   String?  // JSON string
  ipAddress String?
  userAgent String?
  createdAt DateTime @default(now())

  @@index([userId])
  @@index([createdAt])
  @@map("audit_logs")
}